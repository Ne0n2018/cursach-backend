// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  TEACHER
}

enum LessonStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum Subject {
  MATH
  ENGLISH
  PHYSICS
  BIOLOGY
  GEOGRAPHY
  RUSSIAN
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String?
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  teacher   Teacher? // Связь с репетитором (для роли TEACHER)
  bookings  Booking[] // Бронирования, сделанные пользователем
  reviews   Review[] // Отзывы, оставленные пользователем
}

model Teacher {
  id          String     @id @default(uuid())
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id])
  subjects    Subject[] // Предметы, которые преподаёт репетитор (например, ["Math", "Physics"])
  description String? // Описание репетитора
  hourlyRate  Float // Стоимость часа
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  schedules   Schedule[] // Расписание репетитора
  bookings    Booking[] // Бронирования уроков с этим репетитором
  reviews     Review[] // Отзывы о репетиторе
}

model Schedule {
  id        String   @id @default(uuid())
  teacherId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  startTime DateTime // Начало доступного времени
  endTime   DateTime // Конец доступного времени
  isBooked  Boolean  @default(false) // Забронировано ли это время
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  teacherId String
  teacher   Teacher      @relation(fields: [teacherId], references: [id])
  startTime DateTime // Время начала урока
  endTime   DateTime // Время окончания урока
  status    LessonStatus @default(PENDING) // Статус бронирования
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teacherId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  rating    Int // Оценка (например, от 1 до 5)
  comment   String? // Комментарий
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
